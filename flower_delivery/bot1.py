import logging
import asyncio
import os

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')
import django

django.setup()
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from config import TOKEN, TELEGRAM_CHAT_ID
from orders.models import Flower
from asgiref.sync import sync_to_async

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–æ–∫ –ø–æ ID
@sync_to_async
def get_flower_by_id(id):
    return Flower.objects.get(id=id)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram
async def send_order_to_telegram(order_data):
    text = f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n" \
           f"üå∏ –ë—É–∫–µ—Ç: {order_data['flower_image']}\n" \
           f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_data['cost']} ‚ÇΩ\n" \
           f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_date']}\n" \
           f"üïë –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_time']}\n" \
           f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_address']}\n" \
           f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data.get('comment', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')}"

    try:
        await bot.send_photo(TELEGRAM_CHAT_ID, order_data["flower_image"], caption=text, parse_mode="Markdown")
        logger.info("Order data sent successfully to Telegram.")
    except Exception as e:
        logger.error(f"Failed to send order to Telegram: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start –∏ /help
@dp.message(Command('start'))
@dp.message(Command('help'))
async def send_welcome(message: types.Message):
    logger.info(f"User {message.from_user.id} sent the /start command")
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤!")

# –ö–æ–º–∞–Ω–¥–∞ /order –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(Command('order'))
async def order(message: types.Message):
    try:
        flower_id = int(message.text.split()[1])  # –ü–æ–ª—É—á–∞–µ–º ID –±—É–∫–µ—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        flower = await get_flower_by_id(flower_id)  # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–æ–∫ –ø–æ ID

        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        order_data = {
            "flower_image": flower.image.url,
            "cost": flower.price,
            "delivery_date": "2024-12-25",  # –ü—Ä–∏–º–µ—Ä –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            "delivery_time": "14:00",  # –ü—Ä–∏–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            "delivery_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 10",  # –ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞
            "comment": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!"  # –ü—Ä–∏–º–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
        await bot.send_photo(message.chat.id, order_data["flower_image"], caption=f"–í–∞—à –∑–∞–∫–∞–∑: {flower.name}.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {flower.price} —Ä—É–±", parse_mode="Markdown")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Telegram-–∫–∞–Ω–∞–ª –º–∞–≥–∞–∑–∏–Ω–∞
        await send_order_to_telegram(order_data)

    except IndexError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –±—É–∫–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /order 3")
    except ValueError:
        await message.reply("ID –±—É–∫–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Flower.DoesNotExist:
        await message.reply("–ë—É–∫–µ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /repeat_order –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(Command('repeat_order'))
async def repeat_order(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_order = OrderHistory.objects.filter(user=message.from_user).order_by('-id').first()

        if last_order:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            order_data = {
                "flower_image": last_order.flower.image.url,
                "cost": last_order.flower.price,
                "delivery_date": last_order.delivery_date,
                "delivery_time": last_order.delivery_time,
                "delivery_address": last_order.delivery_address,
                "comment": last_order.comment or "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–∫–∞–∑–µ
            await bot.send_photo(message.chat.id, order_data["flower_image"],
                                 caption=f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–∫–∞–∑: {last_order.flower.name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {last_order.cost} —Ä—É–±",
                                 parse_mode="Markdown")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Telegram-–∫–∞–Ω–∞–ª –º–∞–≥–∞–∑–∏–Ω–∞
            await send_order_to_telegram(order_data)

        else:
            await message.reply("–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑.")
    except Exception as e:
        logger.error(f"Error while repeating order: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫–∞–∑–∞—Ö
@dp.message(Command('report'))
async def send_report(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        report = Report.objects.filter(date=timezone.now().date()).first()
        if report:
            text = f"–û—Ç—á–µ—Ç –∑–∞ {report.date}:\n"
            text += f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {report.total_orders}\n"
            text += f"–û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {report.total_sales} —Ä—É–±\n"
            text += f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {report.total_revenue} —Ä—É–±\n"
            text += f"–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {report.total_expenses} —Ä—É–±\n"
            text += f"–ü—Ä–∏–±—ã–ª—å: {report.profit} —Ä—É–±\n"
        else:
            text = "–û—Ç—á–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç."

        await message.reply(text)

    except Exception as e:
        logger.error(f"Error generating report: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    dp.run_polling()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º dp.run_polling() –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞...")
    start_bot()

if __name__ == '__main__':
    main()
